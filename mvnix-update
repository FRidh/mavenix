#!/bin/bash
set -e

usage() {
  test "$1" && echo -e Error: $1\\n || echo -n
  cat <<EOF
  Usage: mvnix-update [OPTIONS] [<NIX-FILE>]

  OPTIONS
    --save-repo|-s <path>    Specify path to save maven repo to. This will
                               speed up consecutive runs, but might affect
                               lock file if POM is changed in between.
    --no-add|-n              Don't add dependencies to nix store
    --verbose|-v             Verbose output
EOF
  exit 1
}

# Setup work dir and cleanup
WORK_DIR="$(mktemp -d --tmpdir mvnix-update.XXXXXX)"
cleanup() { rm -rf "$WORK_DIR" || true; }
trap "trap - TERM; cleanup; kill -- $$" EXIT INT TERM

# Default values
config="."
tmp_repo="$WORK_DIR/m2-repo"

# Parse CLI arguments
while test "$1";do
  case "$1" in
    -s|--save-repo) shift;tmp_repo="$1";;
    -n|--no-add) no_add=1;;
    -v|--verbose) verbose=1;set -x;;
    -*) usage;;
    *) config="$1";;
  esac
  shift
done

config="$(realpath "$config")"
tmp_repo="$(realpath "$tmp_repo")"
mkdir -p "$tmp_repo"

ns_() {
  local ns_wd="$1";shift
  HOME="/tmp/nowhere" nix-shell --show-trace --pure \
    --run "cd \"$ns_wd\"; $*" -E "(import \"$config\" {}).override { update = true; }";
}

echo >&2 "
  Getting mavenix meta data...
"
mavenixMeta="$(ns_ . echo '$mavenixMeta')"
mq() { jq -rc "$1" <<<"$mavenixMeta"; }

cp -rf $(mq .emptyRepo)/* "$tmp_repo" >/dev/null 2>&1 || true
chmod -R u+w "$tmp_repo" || true #echo >&2 Failed to set chmod on temp repo dir.

settings="$(mq .settings)"
src_path="$(mq .srcPath)"
src_wd="$src_path"
if test ! -w "$src_wd"; then
  src_wd="$WORK_DIR/src"
  cp -r "$src_path" "$src_wd"
  chmod -R u+w "$src_wd" || true #echo >&2 Failed to set chmod on temp repo dir.
fi

mvn_flags="$(test "$verbose" && printf %s "-e -X" || true)"
mvn_() { ns_ "$src_wd" mvn $mvn_flags -B -nsu --settings "$settings" "$@"; }
mvn_out() { ns_ "$src_wd" mvn -B -nsu --settings "$settings" "$@"; }

echo >&2 "
  Running mvn package...
"
mvn_ >&2 package -Dmaven.test.skip.exec=true -DskipTests -Dmaven.repo.local="$tmp_repo"

echo >&2 "
  Getting project info...
"
pom="$(mvn_out help:effective-pom | grep -v '^\[\|^Effective \|^$' | xq -c .)"
projects="$(jq -c '.projects.project // [.project]' <<<"$pom")"
pq() { jq -rc "$1" <<<"$projects"; }
export -f pq

groupId="$(pq .[0].groupId)"
artifactId="$(pq .[0].artifactId)"
version="$(pq .[0].version)"

modules="$(pq '
  [ .[]
    | {
      name: (.artifactId + "-" + .version),
      groupId, artifactId, version,
      path: (.build.directory | sub("^'$src_wd'/"; "./") | sub("/target"; ""))
    }
  ]
')"

remotes_repos="$(pq '
  [ [.[].repositories.repository, .[].pluginRepositories.pluginRepository]
    | flatten | .[]
    | {(.id):.url}
  ] | add
')"

tmp_lock_file="$WORK_DIR/tmp-mavenix.lock"
lock_file="$(mq .infoFile)"

echo >&2 "
  Resolving maven dependencies...
"
mvn_ >&2 dependency:go-offline -Dmaven.repo.local="$tmp_repo"

echo >&2 "
  Creating lock file...
"
(
echo -n "{
  \"name\": \"$artifactId-$version\",
  \"groupId\": \"$groupId\",
  \"artifactId\": \"$artifactId\",
  \"version\": \"$version\",
  \"submodules\": $modules,
  \"deps\": [ $(mq .deps[] | sed 's/\(.\)$/\1,/')"
( cd $tmp_repo
remotes="$(find . -type f -name "*.repositories" | sed 's|^\./||' | sort)"
sep=""
for remote in $remotes; do
  dir="$(dirname "$remote")"
  files="$(find "$dir" -type f ! -name "*.repositories" ! -name "*.sha1" \
    | grep -v '^#' "$remote" | sed "s|^|$dir/|")"
  for file_ in $files; do
    file=$(echo $file_ | cut -d '>' -f1)
    # Maven 3.0.5 for 3.3.9 use $file instead of $file_real
    file_real=$(echo $(echo $file | sed 's/-SNAPSHOT\./-[0-9]*\./'))
    repo=$(echo $file_ | cut -d '>' -f2 | sed 's/=$//')
    test "$repo" || continue
    echo -n "$sep
    {\"path\":\"$file_real\",\"sha1\":\"$(grep -Eo '[0-9a-zA-Z]{40}' < $file_real.sha1)\"}"
    sep=","

    test "$no_add" || nix-store --add-fixed sha1 "$file_real" >&2
  done
done

echo -n "
  ],
  \"metas\": ["
metafiles="$(find . -type f -name "maven-metadata-*.xml"  | sed 's|^\./||' | sort)"
sep=""
for file in $metafiles; do
  repo=$(basename $file | sed 's/^maven-metadata-//;s/\.xml$//')
  [[ "$repo" && "$repo" != "local"  ]] || continue
  echo -n "$sep{
      \"path\": \"$(dirname $file)\",
      \"content\": \"$(sed ':a;N;$!ba;s/\n/\\n/g;s/\"/\\\"/g' $file)\"
    }"
  sep=", "
done
)
echo -n "
  ],
  \"remotes\": $remotes_repos
}
"
) > "$tmp_lock_file"


echo >&2 "
  Sanity check...
"
jq -c . < "$tmp_lock_file" > /dev/null
mv "$tmp_lock_file" "$lock_file"

echo >&2 "
  Lock file created at: $lock_file
"
